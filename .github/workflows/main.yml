name: Main

on:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "main"
  workflow_dispatch:

permissions:
  id-token: write
  contents: write
  checks: write
  issues: read
  pull-requests: write

jobs:
  static_analysis:
    name: Linting and Type Checking
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.10" ]
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.7.1
          virtualenvs-create: true

      - name: Install dependencies
        run: poetry install --no-interaction --only dev

      - name: black
        run: poetry run black . --check

      - name: isort
        run: poetry run isort . --check

      - name: flake8
        run: poetry run flake8 wipe_free_space tests --count --max-line-length=120 --extend-ignore=E203,E266,E501,W503,F403,E722,F541 --statistics

      - name: MyPy
        run: poetry run mypy wipe_free_space/__main__.py

  unit_tests_linux:
    name: Ubuntu, Build & Unit Testing
    runs-on: ubuntu-22.04
    # Disable this job for now, until the tests are more in-place.
    if: false
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.9", "3.12" ]
    steps:
      - uses: actions/checkout@v4

      - name: print ENV variables
        run: printenv

      - name: Set up Python ${{ matrix.python-version }}
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.7.1
          virtualenvs-create: true

      - name: Install OS packages
        run: |
          sudo apt-get update && \
          sudo apt-get install -y \

      - name: Install project and dependencies
        run: poetry install --no-interaction --with test

      - name: Test with pytest
        run: poetry run pytest --junitxml=pytest.xml --cov-report=term-missing:skip-covered --cov=wipe_free_space | tee pytest-coverage.txt

      - name: Pytest coverage comment
        uses: MishaKav/pytest-coverage-comment@main
        with:
          title: Linux Test Coverage
          pytest-coverage-path: ./pytest-coverage.txt
          junitxml-path: ./pytest.xml
          unique-id-for-comment: "Ubuntu-py${{matrix.python-version}}"


  unit_tests_windows:
    name: Windows, Build & Unit Testing
    runs-on: windows-2019
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.9", "3.12" ]
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Print python version
        run: python3 --version

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.7.1
          virtualenvs-create: true

      - name: Install project and dependencies
        run: poetry install --no-interaction --with test

      - name: Test with pytest
        run: poetry run pytest --junitxml=pytest.xml --cov-report=term-missing:skip-covered --cov=wipe_free_space | tee pytest-coverage.txt

      - name: Pytest coverage comment
        uses: MishaKav/pytest-coverage-comment@main
        with:
          title: Windows Test Coverage
          pytest-coverage-path: ./pytest-coverage.txt
          junitxml-path: ./pytest.xml
          unique-id-for-comment: "Windows-py${{matrix.python-version}}"
